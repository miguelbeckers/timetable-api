package ipb.pt.timetableapi.mapper;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class LessonUnitMapperTest {
    private final LessonUnitMapper lessonUnitMapper;

    @Autowired
    public LessonUnitMapperTest(LessonUnitMapper lessonUnitMapper) {
        this.lessonUnitMapper = lessonUnitMapper;
    }

    // testMapBlocksToUnits
    @Test
    public void test_5_Block_To_10_Units() {

        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─────────┐ | [ ─ 0.5 ─ ]
        // 02 | 08:30 -> 09:00 | │         │ | [ ─ 0.5 ─ ]
        // 03 | 09:00 -> 09:30 | │         │ | [ ─ 0.5 ─ ]
        // 04 | 09:30 -> 10:00 | │         │ | [ ─ 0.5 ─ ]
        // 05 | 10:00 -> 10:30 | │    5    │ | [ ─ 0.5 ─ ]
        // 06 | 10:30 -> 11:00 | │         │ | [ ─ 0.5 ─ ]
        // 07 | 11:00 -> 11:30 | │         │ | [ ─ 0.5 ─ ]
        // 08 | 11:30 -> 12:00 | │         │ | [ ─ 0.5 ─ ]
        // 09 | 12:00 -> 12:30 | │         │ | [ ─ 0.5 ─ ]
        // 10 | 12:30 -> 13:00 | └─────────┘ | [ ─ 0.5 ─ ]

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_4_5_Block_To_9_Units() {

        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─────────┐ | [ ─ 0.5 ─ ]
        // 02 | 08:30 -> 09:00 | │         │ | [ ─ 0.5 ─ ]
        // 03 | 09:00 -> 09:30 | │         │ | [ ─ 0.5 ─ ]
        // 04 | 09:30 -> 10:00 | │         │ | [ ─ 0.5 ─ ]
        // 05 | 10:00 -> 10:30 | │   4.5   │ | [ ─ 0.5 ─ ]
        // 06 | 10:30 -> 11:00 | │         │ | [ ─ 0.5 ─ ]
        // 07 | 11:00 -> 11:30 | │         │ | [ ─ 0.5 ─ ]
        // 08 | 11:30 -> 12:00 | │         │ | [ ─ 0.5 ─ ]
        // 09 | 12:00 -> 12:30 | │         │ | [ ─ 0.5 ─ ]
        // 10 | 12:30 -> 13:00 | └─────────┘ |

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_0_5_Block_To_1_Unit() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | [ ─ 0.5 ─ ] | [ ─ 0.5 ─ ]

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_2x2_5_Blocks_To_10_Units(){
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─────────┐ | [ ─ 0.5 ─ ]
        // 02 | 08:30 -> 09:00 | │         │ | [ ─ 0.5 ─ ]
        // 03 | 09:00 -> 09:30 | │   2.5   │ | [ ─ 0.5 ─ ]
        // 04 | 09:30 -> 10:00 | │         │ | [ ─ 0.5 ─ ]
        // 05 | 10:00 -> 10:30 | └─────────┘ │ [ ─ 0.5 ─ ]
        // 06 | 10:30 -> 11:00 | ┌─────────┐ | [ ─ 0.5 ─ ]
        // 07 | 11:00 -> 11:30 | │         │ | [ ─ 0.5 ─ ]
        // 08 | 11:30 -> 12:00 | │   2.5   │ | [ ─ 0.5 ─ ]
        // 09 | 12:00 -> 12:30 | │         │ | [ ─ 0.5 ─ ]
        // 10 | 12:30 -> 13:00 | └─────────┘ | [ ─ 0.5 ─ ]

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_2_5_And_2_Blocks_To_9_Units() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─────────┐ | [ ─ 0.5 ─ ]
        // 02 | 08:30 -> 09:00 | │         │ | [ ─ 0.5 ─ ]
        // 03 | 09:00 -> 09:30 | │   2.5   │ | [ ─ 0.5 ─ ]
        // 04 | 09:30 -> 10:00 | │         │ | [ ─ 0.5 ─ ]
        // 05 | 10:00 -> 10:30 | └─────────┘ │ [ ─ 0.5 ─ ]
        // 06 | 10:30 -> 11:00 | ┌─────────┐ | [ ─ 0.5 ─ ]
        // 07 | 11:00 -> 11:30 | │         │ | [ ─ 0.5 ─ ]
        // 08 | 11:30 -> 12:00 | │    2    │ | [ ─ 0.5 ─ ]
        // 09 | 12:00 -> 12:30 | │         │ | [ ─ 0.5 ─ ]
        // 10 | 12:30 -> 13:00 | └─────────┘ |

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_2_And_2_5_Blocks_To_8_Units() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─────────┐ | [ ─ 0.5 ─ ]
        // 02 | 08:30 -> 09:00 | │         │ | [ ─ 0.5 ─ ]
        // 03 | 09:00 -> 09:30 | │    2    │ | [ ─ 0.5 ─ ]
        // 04 | 09:30 -> 10:00 | │         │ | [ ─ 0.5 ─ ]
        //    | 10:00 -> 10:30 | └─────────┘ │
        // 05 | 10:30 -> 11:00 | ┌─────────┐ | [ ─ 0.5 ─ ]
        // 06 | 11:00 -> 11:30 | │         │ | [ ─ 0.5 ─ ]
        // 07 | 11:30 -> 12:00 | │    2    │ | [ ─ 0.5 ─ ]
        // 08 | 12:00 -> 12:30 | │         │ | [ ─ 0.5 ─ ]
        // 09 | 12:30 -> 13:00 | └─────────┘ |

        // Arrange
        // Act
        // Assert
    }

    // testUnitsToBlocks
    @Test
    public void testMap10UnitsTo2BlocksOf2_5(){
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | [ ─ 0.5 ─ ] | ┌─────────┐
        // 02 | 08:30 -> 09:00 | [ ─ 0.5 ─ ] | │         │
        // 03 | 09:00 -> 09:30 | [ ─ 0.5 ─ ] | │   2.5   │
        // 04 | 09:30 -> 10:00 | [ ─ 0.5 ─ ] | │         │
        // 05 | 10:00 -> 10:30 | [ ─ 0.5 ─ ] | └─────────┘
        // 06 | 10:30 -> 11:00 | [ ─ 0.5 ─ ] | ┌─────────┐
        // 07 | 11:00 -> 11:30 | [ ─ 0.5 ─ ] | │         │
        // 08 | 11:30 -> 12:00 | [ ─ 0.5 ─ ] | │   2.5   │
        // 09 | 12:00 -> 12:30 | [ ─ 0.5 ─ ] | │         │
        // 10 | 12:30 -> 13:00 | [ ─ 0.5 ─ ] | └─────────┘

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void testMapBlocksToBlocks() {
        // Arrange
        // Act
        // Assert
    }

    @Test
    public void testGetLessonBlocksBySize() {
        // Arrange
        // Act
        // Assert
    }

    // id | time           | input       | output
    // 01 | 08:00 -> 08:30 | ┌─────────┐ | ┌─────────┐
    // 02 | 08:30 -> 09:00 | │         │ | │         │
    // 03 | 09:00 -> 09:30 | │         │ | │   2.5   │
    // 04 | 09:30 -> 10:00 | │         │ | │         │
    // 05 | 10:00 -> 10:30 | │    5    │ | └─────────┘
    // 06 | 10:30 -> 11:00 | │         │ | ┌─────────┐
    // 07 | 11:00 -> 11:30 | │         │ | │         │
    // 08 | 11:30 -> 12:00 | │         │ | │   2.5   │
    // 09 | 12:00 -> 12:30 | │         │ | │         │
    // 10 | 12:30 -> 13:00 | └─────────┘ | └─────────┘
}
