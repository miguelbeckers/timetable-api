package ipb.pt.timetableapi.mapper;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class MapLessonUnitMapperTest {
    private final LessonUnitMapper lessonUnitMapper;

    @Autowired
    public MapLessonUnitMapperTest(LessonUnitMapper lessonUnitMapper) {
        this.lessonUnitMapper = lessonUnitMapper;
    }

    // testMapBlocksToUnits
    @Test
    public void test_1_Block_5_To_10_Units() {

        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 5 ───┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        // 05 | 10:00 -> 10:30 | │         │ | ┌── 0.5 ──┐
        // 06 | 10:30 -> 11:00 | │         │ | ┌── 0.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | ┌── 0.5 ──┐
        // 08 | 11:30 -> 12:00 | │         │ | ┌── 0.5 ──┐
        // 09 | 12:00 -> 12:30 | │         │ | ┌── 0.5 ──┐
        // 10 | 12:30 -> 13:00 | └─────────┘ | ┌── 0.5 ──┐

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_4_5_To_9_Units() {

        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 4.5 ──┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        // 05 | 10:00 -> 10:30 | │         │ | ┌── 0.5 ──┐
        // 06 | 10:30 -> 11:00 | │         │ | ┌── 0.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | ┌── 0.5 ──┐
        // 08 | 11:30 -> 12:00 | │         │ | ┌── 0.5 ──┐
        // 09 | 12:00 -> 12:30 | │         │ | ┌── 0.5 ──┐
        //    | 12:30 -> 13:00 | └─────────┘ |

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_4_To_8_Units() {

        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 4 ───┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        // 05 | 10:00 -> 10:30 | │         │ | ┌── 0.5 ──┐
        // 06 | 10:30 -> 11:00 | │         │ | ┌── 0.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | ┌── 0.5 ──┐
        // 08 | 11:30 -> 12:00 | │         │ | ┌── 0.5 ──┐
        //    | 12:00 -> 12:30 | │         │ |
        //    | 12:30 -> 13:00 | └─────────┘ |

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_3_5_To_7_Units() {

        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 3.5 ──┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        // 05 | 10:00 -> 10:30 | │         │ | ┌── 0.5 ──┐
        // 06 | 10:30 -> 11:00 | │         │ | ┌── 0.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | ┌── 0.5 ──┐
        //    | 11:30 -> 12:00 | │         │ |
        //    | 12:00 -> 12:30 | │         │ |
        //    | 12:30 -> 13:00 | └─────────┘ |

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_3_To_6_Units() {

        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 3 ───┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        // 05 | 10:00 -> 10:30 | │         │ | ┌── 0.5 ──┐
        // 06 | 10:30 -> 11:00 | │         │ | ┌── 0.5 ──┐
        //    | 11:00 -> 11:30 | │         │ |
        //    | 11:30 -> 12:00 | │         │ |
        //    | 12:00 -> 12:30 | │         │ |
        //    | 12:30 -> 13:00 | └─────────┘ |

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_2_5_To_5_Units() {

        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 2.5 ──┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        // 05 | 10:00 -> 10:30 | └─────────┘ │ ┌── 0.5 ──┐

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_2_To_4_Units() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 2 ───┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        //    | 10:00 -> 10:30 | └─────────┘ │

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_1_5_To_3_Units() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 1.5 ──┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        //    | 09:30 -> 10:00 | │         │ |
        //    | 10:00 -> 10:30 | └─────────┘ │

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_1_To_2_Units() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 1 ───┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | └─────────┘ | ┌── 0.5 ──┐

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_0_5_To_1_Unit() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 0.5 ──┐ | ┌── 0.5 ──┐

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_2_Blocks_2_5_To_10_Units(){
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 2.5 ──┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        // 05 | 10:00 -> 10:30 | └─────────┘ │ ┌── 0.5 ──┐
        // 06 | 10:30 -> 11:00 | ┌── 2.5 ──┐ | ┌── 0.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | ┌── 0.5 ──┐
        // 08 | 11:30 -> 12:00 | │         │ | ┌── 0.5 ──┐
        // 09 | 12:00 -> 12:30 | │         │ | ┌── 0.5 ──┐
        // 10 | 12:30 -> 13:00 | └─────────┘ | ┌── 0.5 ──┐

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_2_Blocks_2_To_8_Units() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 2 ───┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        //    | 10:00 -> 10:30 | └─────────┘ │
        // 05 | 10:30 -> 11:00 | ┌─── 2 ───┐ | ┌── 0.5 ──┐
        // 06 | 11:00 -> 11:30 | │         │ | ┌── 0.5 ──┐
        // 07 | 11:30 -> 12:00 | │         │ | ┌── 0.5 ──┐
        // 08 | 12:00 -> 12:30 | │         │ | ┌── 0.5 ──┐
        //    | 12:30 -> 13:00 | └─────────┘ |

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_2_5_And_1_Block_1_5_To_8_Units() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 2.5 ──┐ | ┌── 0.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | ┌── 0.5 ──┐
        // 03 | 09:00 -> 09:30 | │         │ | ┌── 0.5 ──┐
        // 04 | 09:30 -> 10:00 | │         │ | ┌── 0.5 ──┐
        // 05 | 10:00 -> 10:30 | └─────────┘ │ ┌── 0.5 ──┐
        // 06 | 10:30 -> 11:00 | ┌── 1.5 ──┐ | ┌── 0.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | ┌── 0.5 ──┐
        // 08 | 11:30 -> 12:00 | │         │ | ┌── 0.5 ──┐
        //    | 12:00 -> 12:30 | │         │ |
        //    | 12:30 -> 13:00 | └─────────┘ |
        // Arrange
        // Act
        // Assert
    }

    // testUnitsToBlocks

    // testMapBlocksToBlocks
    @Test
    public void test_1_Block_5_To_2_Blocks_2_5() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 5 ───┐ | ┌── 2.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | │         │
        // 03 | 09:00 -> 09:30 | │         │ | │         │
        // 04 | 09:30 -> 10:00 | │         │ | │         │
        // 05 | 10:00 -> 10:30 | │         │ | └─────────┘
        // 06 | 10:30 -> 11:00 | │         │ | ┌── 2.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | │         │
        // 08 | 11:30 -> 12:00 | │         │ | │         │
        // 09 | 12:00 -> 12:30 | │         │ | │         │
        // 10 | 12:30 -> 13:00 | └─────────┘ | └─────────┘

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_4_5_To_1_Blocks_2_5_And_1_Bloc_2() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 4.5 ──┐ | ┌── 2.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | │         │
        // 03 | 09:00 -> 09:30 | │         │ | │         │
        // 04 | 09:30 -> 10:00 | │         │ | │         │
        // 05 | 10:00 -> 10:30 | │         │ | └─────────┘
        // 06 | 10:30 -> 11:00 | │         │ | ┌─── 2 ───┐
        // 07 | 11:00 -> 11:30 | │         │ | │         │
        // 08 | 11:30 -> 12:00 | │         │ | │         │
        // 09 | 12:00 -> 12:30 | │         │ | │         │
        //    | 12:30 -> 13:00 | └─────────┘ | └─────────┘

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_4_To_1_Blocks_2_5_And_1_Bloc_1_5() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 4 ───┐ | ┌── 2.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | │         │
        // 03 | 09:00 -> 09:30 | │         │ | │         │
        // 04 | 09:30 -> 10:00 | │         │ | │         │
        // 05 | 10:00 -> 10:30 | │         │ | └─────────┘
        // 06 | 10:30 -> 11:00 | │         │ | ┌── 1.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | │         │
        // 08 | 11:30 -> 12:00 | │         │ | │         │
        //    | 12:00 -> 12:30 | │         │ | │         │
        //    | 12:30 -> 13:00 | └─────────┘ | └─────────┘

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_3_5_To_1_Blocks_2_5_And_1_Bloc_1() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌── 3.5 ──┐ | ┌── 2.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | │         │
        // 03 | 09:00 -> 09:30 | │         │ | │         │
        // 04 | 09:30 -> 10:00 | │         │ | │         │
        // 05 | 10:00 -> 10:30 | │         │ | └─────────┘
        // 06 | 10:30 -> 11:00 | │         │ | ┌─── 1 ───┐
        // 07 | 11:00 -> 11:30 | │         │ | │         │
        //    | 11:30 -> 12:00 | │         │ | │         │
        //    | 12:00 -> 12:30 | │         │ | │         │
        //    | 12:30 -> 13:00 | └─────────┘ | └─────────┘

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void test_1_Block_3_To_1_Blocks_2_5_And_1_Bloc_0_5() {
        // id | time           | input       | output
        // 01 | 08:00 -> 08:30 | ┌─── 3 ───┐ | ┌── 2.5 ──┐
        // 02 | 08:30 -> 09:00 | │         │ | │         │
        // 03 | 09:00 -> 09:30 | │         │ | │         │
        // 04 | 09:30 -> 10:00 | │         │ | │         │
        // 05 | 10:00 -> 10:30 | │         │ | └─────────┘
        // 06 | 10:30 -> 11:00 | │         │ | ┌── 0.5 ──┐
        // 07 | 11:00 -> 11:30 | │         │ | │         │
        //    | 11:30 -> 12:00 | │         │ | │         │
        //    | 12:00 -> 12:30 | │         │ | │         │
        //    | 12:30 -> 13:00 | └─────────┘ | └─────────┘

        // Arrange
        // Act
        // Assert
    }

    @Test
    public void testGetLessonBlocksBySize() {
        // Arrange
        // Act
        // Assert
    }
}
